{"meta":{"title":"柠檬诗诗的小站","subtitle":"一个记录生活和工作的地方","description":"一个记录生活和工作的地方","author":"LemonAce","url":"https://www.lemonss.net","root":"/"},"pages":[{"title":"关于","date":"2022-10-18T14:24:51.719Z","updated":"2022-10-18T14:24:51.719Z","comments":false,"path":"about/index.html","permalink":"https://www.lemonss.net/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2022-10-18T14:24:51.767Z","updated":"2022-10-18T14:24:51.766Z","comments":false,"path":"books/index.html","permalink":"https://www.lemonss.net/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-10-18T14:24:51.811Z","updated":"2022-10-18T14:24:51.811Z","comments":false,"path":"categories/index.html","permalink":"https://www.lemonss.net/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2022-10-18T14:24:51.987Z","updated":"2022-10-18T14:24:51.905Z","comments":true,"path":"links/index.html","permalink":"https://www.lemonss.net/links/index.html","excerpt":"","text":""},{"title":"项目","date":"2022-10-18T15:38:27.932Z","updated":"2022-10-18T15:38:27.932Z","comments":false,"path":"repository/index.html","permalink":"https://www.lemonss.net/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-10-18T14:24:52.107Z","updated":"2022-10-18T14:24:52.106Z","comments":false,"path":"tags/index.html","permalink":"https://www.lemonss.net/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"禁止长按选中文本","slug":"longtap","date":"2017-01-06T09:21:02.000Z","updated":"2022-10-18T14:39:09.083Z","comments":true,"path":"2017/01/06/longtap/","link":"","permalink":"https://www.lemonss.net/2017/01/06/longtap/","excerpt":"最近在项目中遇到了需要长按选中礼物码的东西，需要把礼物码旁边的文本禁止掉，查了资料，发现了两种方法可以禁止。","text":"最近在项目中遇到了需要长按选中礼物码的东西，需要把礼物码旁边的文本禁止掉，查了资料，发现了两种方法可以禁止。 css方法：12345678.no-touch &#123; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;&#125; 添加一个类，对于需要禁止的dom添加这个类 JS方法：1ontouchstart=&quot;return false;&quot; 在需要禁止的dom上添加这段代码 两种方法对于安卓和IOS的支持我没有单独测试。两个同时使用，对于安卓和IOS可以起到禁止作用。 备注：1、在手机UC浏览器中，如果添加了这段meta标签，则全文无法长按调起菜单： 1&lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;/&gt;&lt;!-- uc不能复制网页内容 需要复制去掉即可--&gt; 2、在手机QQ浏览器（IOS版本）中，长按会弹出保存图片选项（还没有找到原因）： 其他未验证方法：新增事件 contextmenu 可以实现： 123$(&#x27;button&#x27;).bind(&#x27;contextmenu&#x27;, function(e) &#123; e.preventDefault();&#125;)","categories":[{"name":"代码","slug":"代码","permalink":"https://www.lemonss.net/categories/%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"代码片段","slug":"代码片段","permalink":"https://www.lemonss.net/tags/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"}]},{"title":"利用postMessage解决webview中iframe数据交互问题","slug":"postMessage","date":"2016-12-21T07:49:41.000Z","updated":"2022-10-18T14:39:17.701Z","comments":true,"path":"2016/12/21/postMessage/","link":"","permalink":"https://www.lemonss.net/2016/12/21/postMessage/","excerpt":"","text":"最近在项目中遇到了一个在客户端中的webview中嵌入iframe页面的问题，但是嵌入的iframe无法自己撑开，所以需要webview中给iframe一个高度。 这就比较尴尬了，因为webview肯定不知道iframe的高度，所以需要iframe给传一个高度出来。 经过一番查找之后，知道了一种很方便的方法-postMessage方法。 先来看看他的语法： otherWindow.postMessage(data, origin, [transfer]); otherWindow 其他窗口的一个引用，比如iframe的contentWindow属性、执行window.open返回的窗口对象、或者是命名过或数值索引的window.frames。这里即可以是父窗口，也可以子窗口，两者是可以相互传递数据的。 data 将要发送到其他window的数据。它将会被结构化克隆算法序列化(这个不懂是什么意思)。这意味着你可以不受什么限制的将数据对象安全的传送给目标窗口而无需自己序列化。基本是什么参数都可以，字符串、数字、对象、数组，都OK。 origin 字符串参数，指明目标窗口的源，协议+主机+端口号[+URL]，URL会被忽略，所以可以不写，这个参数是为了安全考虑，postMessage()方法只会将message传递给指定窗口，当然如果愿意也可以建参数设置为”*”，这样可以传递给任意窗口，如果要指定和当前窗口同源的话设置为”/“。 transfer(可选) 是一串和message 同时传递的 Transferable 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。（不懂是什么意思，一般没有什么用吧，望大神指点） #### 父页面获取iframe页面信息： demo我放在github上的： demo地址：[父页面获取iframe页面信息](https://htmlpreview.github.io/?https://github.com/yellowlemon/Demo/blob/master/postMessage/btoa/a.html) 父页面： 123456789101112&lt;body&gt; &lt;p&gt;我是父页面&lt;/p&gt; &lt;p&gt;接收到的iframe信息是：&lt;span id=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt; &lt;iframe src=&quot;/btoa/b.html&quot; frameborder=&quot;0&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot;&gt;&lt;/iframe&gt; &lt;script&gt; // event 参数中有 data 属性，就是iframe页面发送过来的数据 window.addEventListener(&quot;message&quot;, function(event) &#123; // 把iframe页面发送过来的数据显示在父页面中 document.getElementById(&quot;content&quot;).innerHTML= event.data; &#125;, false); &lt;/script&gt;&lt;/body&gt; iframe页面 1234567891011&lt;body&gt; &lt;p&gt;我是iframe页面&lt;/p&gt; &lt;div&gt;发送的信息是：&lt;input id=&quot;iframe&quot; type=&quot;text&quot;&gt;&lt;input id=&quot;sendBtn&quot; type=&quot;button&quot; value=&quot;发送&quot;&gt;&lt;/div&gt; &lt;script&gt; // 点击按钮后向父页面发送数据 document.getElementById(&#x27;sendBtn&#x27;).onclick = function() &#123; // window.parent代表父页面 window.parent.postMessage(document.getElementById(&quot;iframe&quot;).value, &#x27;*&#x27;); &#125; &lt;/script&gt;&lt;/body&gt; #### iframe页面获取父页面信息： demo我放在github上的： demo地址：[iframe页面获取父页面信息](https://htmlpreview.github.io/?https://github.com/yellowlemon/Demo/blob/master/postMessage/atob/a.html) 父页面： 123456789101112&lt;body&gt; &lt;p&gt;我是父页面&lt;/p&gt; &lt;div&gt;发送的信息是：&lt;input id=&quot;iframe&quot; type=&quot;text&quot;&gt;&lt;input id=&quot;sendBtn&quot; type=&quot;button&quot; value=&quot;发送&quot;&gt;&lt;/div&gt; &lt;iframe src=&quot;/atob/b.html&quot; frameborder=&quot;0&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot;&gt;&lt;/iframe&gt; &lt;script&gt; // 点击按钮后向iframe页面发送数据 document.getElementById(&#x27;sendBtn&#x27;).onclick = function() &#123; // window.frames[0]代表第一个iframe页面 window.frames[0].postMessage(document.getElementById(&quot;iframe&quot;).value, &#x27;*&#x27;); &#125; &lt;/script&gt;&lt;/body&gt; iframe页面 1234567891011&lt;body&gt; &lt;p&gt;我是iframe页面&lt;/p&gt; &lt;p&gt;接收到的父页面信息是：&lt;span id=&quot;content&quot;&gt;&lt;/span&gt;&lt;/p&gt; &lt;script&gt; // event 参数中有 data 属性，就是父页面发送过来的数据 window.addEventListener(&quot;message&quot;, function(event) &#123; // 把父页面发送过来的数据显示在父页面中 document.getElementById(&quot;content&quot;).innerHTML= event.data; &#125;, false); &lt;/script&gt;&lt;/body&gt; 通过这两个简单的例子我们会发现postMessage的强大之处，有了postMessage，我们甚至可以在两个iframe之间传送数据，只需要一个共同的父元素做中间页。 #### 需要注意的地方： 兼容性： 通过图上可以看出，基本大部分的都能兼容的，但是需要注意一下这句话。 Internet Explorer 8 and 9, and Firefox versions 6.0 and below only support strings as postMessage’s message.(ie 8和9,和Firefox 6.0及以下版本只支持字符串作为postMessage的消息。) 所以如果需要支持这些版本的需要注意data只能是字符串。 安全性： 在线上进行交互时，最好做好安全措施，对于postMessage，最好采用“双向安全机制”。发送方发送数据的时候，确认接受方的源（所以最好不要用*），而接受方监听到message事件后，也可以用event.origin判断是否来自于正确可靠的发送方。并且最好做一下传递数据的数据类型校验。如以下代码： 123456789101112131415function checkMessage(event) &#123; // 只获取需要的域，并非所有都可以跨域 if (event.origin != &quot;need domain&quot;) &#123; return false; &#125; var data = event.data; // 传输数据类型校验 if (typeof(data) !== &#x27;object&#x27;) &#123; return false; &#125; // data 的type中包含xxx则为xxx需要字段。 return data.type === &quot;xxx&quot;;&#125;; 并且通过不同的type可以处理不同的数据，如以下代码： 12345678910switch (checkMessage(event)) &#123; case &#x27;height&#x27;: $(&quot;#bet_&quot;+e.data.id).css(&quot;height&quot;, (e.data.height+1) + &quot;px&quot;); break; case &#x27;jumpDown&#x27;: window.location.href = downUrl; break; default: break;&#125;","categories":[{"name":"代码","slug":"代码","permalink":"https://www.lemonss.net/categories/%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"js","slug":"js","permalink":"https://www.lemonss.net/tags/js/"}]},{"title":"hexo博客之HTTPS访问","slug":"hexo-ssl","date":"2016-12-13T05:58:20.000Z","updated":"2022-10-18T14:38:28.568Z","comments":true,"path":"2016/12/13/hexo-ssl/","link":"","permalink":"https://www.lemonss.net/2016/12/13/hexo-ssl/","excerpt":"最近在看微信小程序时发现小程序必须要https的请求才能支持，所以就在查资料时发现了一篇很有趣的文章《微信小程序之后台https域名绑定以及免费的https证书申请》 我灵光一现，那能不能把我的bolg也加上https了？？说干就干，申请https的ca证书，还是很方便的，申请一个，半个小时都要不了。","text":"最近在看微信小程序时发现小程序必须要https的请求才能支持，所以就在查资料时发现了一篇很有趣的文章《微信小程序之后台https域名绑定以及免费的https证书申请》 我灵光一现，那能不能把我的bolg也加上https了？？说干就干，申请https的ca证书，还是很方便的，申请一个，半个小时都要不了。 只需要到阿里云的安全里面，有一个证书服务。 点进去以后，然后购买免费DV SLL云证书就可以了，之后就是域名和一些身份信息的验证，然后你就能拿到你的密匙了。 阿里云这里做的很好，对于不同的服务器都有不同的配置说明，只需要照着配置去修改就可以了。 因为我的服务器配置是nginx，所以我就参照这个阿里云的配置，进行了配置，这里贴一下我的nginx配置。 在配置https的情况中，遇到了一些问题，这里总结一下 1、80端口访问问题： 12listen 443 ssl;ssl on; 在把ssl打开后，80端口的访问全部会被nginx拒绝掉，并且抛出一个497错误。 查了资料，可以利用497错误将连接重定向到https的域名，参照我的配置即可。 2、七牛云存储无法访问问题 添加https后，七牛云存储的图片都无法访问了(可以配置https请求，但是这就需要钱了，问题是最缺的就是钱)。没有办法，只有把七牛的博客图片全部都签回自己的云服务器。 3、主题的报错统计反馈无法执行 在yilia中有一段错误统计代码，会将错误反馈给litten大神，也是因为https的限制，导致这个请求无法发送，不得已只有把这段JS代码屏蔽掉了。","categories":[{"name":"hexo","slug":"hexo","permalink":"https://www.lemonss.net/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://www.lemonss.net/tags/hexo/"}]},{"title":"7种方法解决移动端Retina屏幕1px边框问题","slug":"retina-1px-border","date":"2016-12-08T02:38:15.000Z","updated":"2022-10-18T14:39:25.464Z","comments":true,"path":"2016/12/08/retina-1px-border/","link":"","permalink":"https://www.lemonss.net/2016/12/08/retina-1px-border/","excerpt":"在之前的项目中，UI告诉我说我们移动项目中的边框全部都变粗了。原谅我的近视眼，为什么我看不出什么差距了，结果UI把他的设计稿跟我的屏幕截图跟我看，居然真的不一样！！！ 没有办法，只有在后面的版本中去修改了，但是要改的话，需要知道是为什么。所以查了很多资料，终于搞懂了这个问题，并且总结了几种方法。","text":"在之前的项目中，UI告诉我说我们移动项目中的边框全部都变粗了。原谅我的近视眼，为什么我看不出什么差距了，结果UI把他的设计稿跟我的屏幕截图跟我看，居然真的不一样！！！ 没有办法，只有在后面的版本中去修改了，但是要改的话，需要知道是为什么。所以查了很多资料，终于搞懂了这个问题，并且总结了几种方法。 造成边框变粗的原因其实这个原因很简单，因为css中的1px并不等于移动设备的1px，这些由于不同的手机有不同的像素密度。在window对象中有一个devicePixelRatio属性，他可以反应css中的像素与设备的像素比。 devicePixelRatio的官方的定义为：设备物理像素和设备独立像素的比例，也就是 devicePixelRatio = 物理像素 / 独立像素。 解决边框变粗的6种办法1、0.5px边框在2014年的 WWDC，“设计响应的Web体验” 一讲中，Ted O’Connor 讲到关于“retinahairlines”（retina 极细的线）：在retina屏上仅仅显示1物理像素的边框，开发者应该如何处理呢。 他们曾介绍到 iOS 8 和 OS X Yosemite 即将支持 0.5px 的边框： 额的神呐！so easy! 果真如此吗？ 这样还不够（WWDC幻灯片通常是“唬人”的），但是相差不多。 问题是 retina 屏的浏览器可能不认识0.5px的边框，将会把它解释成0px，没有边框。包括 iOS 7 和之前版本，OS X Mavericks 及以前版本，还有 Android 设备。 解决方案： 解决方案是通过 JavaScript 检测浏览器能否处理0.5px的边框，如果可以，给html标签元素添加个class。 12345678910if (window.devicePixelRatio &amp;&amp; devicePixelRatio &gt;= 2) &#123; var testElem = document.createElement(&#x27;div&#x27;); testElem.style.border = &#x27;.5px solid transparent&#x27;; document.body.appendChild(testElem); if (testElem.offsetHeight == 1) &#123; document.querySelector(&#x27;html&#x27;).classList.add(&#x27;hairlines&#x27;); &#125; document.body.removeChild(testElem);&#125;// 脚本应该放在&lt;body&gt;内，如果在&lt;head&gt;里面运行，需要包装 $(document).ready(function() &#123;&#125;) 然后，极细的边框样式就容易了： 1234567div &#123; border: 1px solid #bbb;&#125;.hairlines div &#123; border-width: 0.5px;&#125; 优点： 简单，不需要过多代码。 缺点： 无法兼容安卓设备、 iOS 8 以下设备。 2、使用border-image实现准备一张符合你要求的border-image： 样式设置： 12345.border-bottom-1px &#123; border-width: 0 0 1px 0; -webkit-border-image: url(linenew.png) 0 0 2 0 stretch; border-image: url(linenew.png) 0 0 2 0 stretch;&#125; 上文是把border设置在边框的底部，所以使用的图片是2px高，上部的1px颜色为透明，下部的1px使用视觉规定的border的颜色。如果边框底部和顶部同时需要border，可以使用下面的border-image： 样式设置： 12345.border-image-1px &#123; border-width: 1px 0; -webkit-border-image: url(linenew.png) 2 0 stretch; border-image: url(linenew.png) 2 0 stretch;&#125; 到目前为止，我们已经能在iphone上展现1px border的效果了。但是我们发现这样的方法在非视网膜屏上会出现border显示不出来的现象，于是使用Media Query做了一些兼容，样式设置如下： 123456789101112.border-image-1px &#123; border-bottom: 1px solid #666;&#125;@media only screen and (-webkit-min-device-pixel-ratio: 2) &#123; .border-image-1px &#123; border-bottom: none; border-width: 0 0 1px 0; -webkit-border-image: url(../img/linenew.png) 0 0 2 0 stretch; border-image: url(../img/linenew.png) 0 0 2 0 stretch; &#125;&#125; 优点： 可以设置单条,多条边框 没有性能瓶颈的问题 缺点： 修改颜色麻烦, 需要替换图片 圆角需要特殊处理，并且边缘会模糊 3、使用background-image实现background-image 跟border-image的方法一样，你要先准备一张符合你要求的图片。然后将边框模拟在背景上。 样式设置： 12345.background-image-1px &#123; background: url(../img/line.png) repeat-x left bottom; -webkit-background-size: 100% 1px; background-size: 100% 1px;&#125; 优点： 可以设置单条,多条边框 没有性能瓶颈的问题 缺点： 修改颜色麻烦, 需要替换图片 圆角需要特殊处理，并且边缘会模糊 4、多背景渐变实现与background-image方案类似，只是将图片替换为css3渐变。设置1px的渐变背景，50%有颜色，50%透明。 样式设置： 123456789101112.background-gradient-1px &#123; background: linear-gradient(180deg, black, black 50%, transparent 50%) top left / 100% 1px no-repeat, linear-gradient(90deg, black, black 50%, transparent 50%) top right / 1px 100% no-repeat, linear-gradient(0, black, black 50%, transparent 50%) bottom right / 100% 1px no-repeat, linear-gradient(-90deg, black, black 50%, transparent 50%) bottom left / 1px 100% no-repeat;&#125;/* 或者 */.background-gradient-1px&#123; background: -webkit-gradient(linear, left top, left bottom, color-stop(.5, transparent), color-stop(.5, #c8c7cc), to(#c8c7cc)) left bottom repeat-x; background-size: 100% 1px;&#125; 优点： 可以实现单条、多条边框 边框的颜色随意设置 缺点： 代码量不少 圆角没法实现 多背景图片有兼容性问题 5、使用box-shadow模拟边框利用css 对阴影处理的方式实现0.5px的效果 样式设置： 123.box-shadow-1px &#123; box-shadow: inset 0px -1px 1px -1px #c8c7cc;&#125; 优点： 代码量少 可以满足所有场景 缺点： 边框有阴影，颜色变浅 6、viewport + rem 实现同时通过设置对应viewport的rem基准值，这种方式就可以像以前一样轻松愉快的写1px了。 在devicePixelRatio = 2 时，输出viewport： 1&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no&quot;&gt; 在devicePixelRatio = 3 时，输出viewport： 1&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=0.3333333333333333, maximum-scale=0.3333333333333333, minimum-scale=0.3333333333333333, user-scalable=no&quot;&gt; 这种兼容方案相对比较完美，适合新的项目，老的项目修改成本过大。 对于这种方案，可以看看《使用Flexible实现手淘H5页面的终端适配》 优点： 所有场景都能满足 一套代码，可以兼容基本所有布局 缺点： 老项目修改代价过大，只适用于新项目 7、伪类 + transform 实现对于老项目，有没有什么办法能兼容1px的尴尬问题了，个人认为伪类+transform是比较完美的方法了。 原理是把原先元素的 border 去掉，然后利用 :before 或者 :after 重做 border ，并 transform 的 scale 缩小一半，原先的元素相对定位，新做的 border 绝对定位。 单条border样式设置： 12345678910111213141516.scale-1px&#123; position: relative; border:none;&#125;.scale-1px:after&#123; content: &#x27;&#x27;; position: absolute; bottom: 0; background: #000; width: 100%; height: 1px; -webkit-transform: scaleY(0.5); transform: scaleY(0.5); -webkit-transform-origin: 0 0; transform-origin: 0 0;&#125; 四条boder样式设置: 1234567891011121314151617181920.scale-1px&#123; position: relative; margin-bottom: 20px; border:none;&#125;.scale-1px:after&#123; content: &#x27;&#x27;; position: absolute; top: 0; left: 0; border: 1px solid #000; -webkit-box-sizing: border-box; box-sizing: border-box; width: 200%; height: 200%; -webkit-transform: scale(0.5); transform: scale(0.5); -webkit-transform-origin: left top; transform-origin: left top;&#125; 最好在使用前也判断一下，结合 JS 代码，判断是否 Retina 屏： 123if(window.devicePixelRatio &amp;&amp; devicePixelRatio &gt;= 2)&#123; document.querySelector(&#x27;ul&#x27;).className = &#x27;scale-1px&#x27;;&#125; 优点： 所有场景都能满足 支持圆角(伪类和本体类都需要加border-radius) 缺点： 对于已经使用伪类的元素(例如clearfix)，可能需要多层嵌套 参考： 《1px on retina》 《再谈mobile web retina 下 1px 边框解决方案》 《Retina屏的移动设备如何实现真正1px的线？》 《在retina屏中实现1px border效果》","categories":[{"name":"代码","slug":"代码","permalink":"https://www.lemonss.net/categories/%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"css","slug":"css","permalink":"https://www.lemonss.net/tags/css/"},{"name":"移动端","slug":"移动端","permalink":"https://www.lemonss.net/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"}]},{"title":"Hexo折腾之图片存储","slug":"hexo-qiniu","date":"2016-12-07T06:58:16.000Z","updated":"2022-10-18T14:38:11.452Z","comments":true,"path":"2016/12/07/hexo-qiniu/","link":"","permalink":"https://www.lemonss.net/2016/12/07/hexo-qiniu/","excerpt":"hexo博客弄好了，写博客遇到了一个最大的问题，就是图片的存放问题，看了一下litten的博客，他是把图片都存在自己服务器的。可是自己的服务器存储是用的系统存储，应该没有那么大的空间，怎么办了？？ 那就只有看看网上的云存储有什么比较好的了，最早的时候，我用的图床是贴图库，之前他可以无限流量，不限时间，但是现在保存时间只能有6个月了。 那肯定不行啊，所以只有换一个了，查了资料，发现了七牛云存储，有一个专门的hexo的七牛插件：hexo-qiniu-sync，但是这个插件有个问题，就是只会把本地文件同步到七牛。这跟我的设想完全不符。 最后我发现了一个神器——极简图床","text":"hexo博客弄好了，写博客遇到了一个最大的问题，就是图片的存放问题，看了一下litten的博客，他是把图片都存在自己服务器的。可是自己的服务器存储是用的系统存储，应该没有那么大的空间，怎么办了？？ 那就只有看看网上的云存储有什么比较好的了，最早的时候，我用的图床是贴图库，之前他可以无限流量，不限时间，但是现在保存时间只能有6个月了。 那肯定不行啊，所以只有换一个了，查了资料，发现了七牛云存储，有一个专门的hexo的七牛插件：hexo-qiniu-sync，但是这个插件有个问题，就是只会把本地文件同步到七牛。这跟我的设想完全不符。 最后我发现了一个神器——极简图床 下面就来讲一讲如何配置七牛以及极简图床： 注册的流程就不说了，注册成功以后，需要做的是： 注册七牛账号并添加资源，然后充值￥10(为了后面的自定义域名绑定)。 选中对应资源绑定加速域名，即将绑定的域名必须为中国大陆以备案。推荐使用二级域名。以免出现，域名绑定成功，通过外链无法访问资源的尴尬（因为 Hexo 部署到 GitHub/Coding 的时候已经对该域名解析里指定过CNAME，再次添加CNAME会报错）。 强烈推荐使用 Chrome + 极简图床（Chrome 插件）+ 上面配置好的七牛账号，完成 Markdown 编辑器里面的外链图片插入工作。 极简图床对于七牛的配置也非常简单，只需要填入一些参数即可 并且极简图床支持markdown语法的复制，可以一步到位，几乎无伤~真是超赞。","categories":[{"name":"hexo","slug":"hexo","permalink":"https://www.lemonss.net/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://www.lemonss.net/tags/hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2016-12-01T06:58:16.000Z","updated":"2022-10-18T14:36:48.917Z","comments":true,"path":"2016/12/01/hello-world/","link":"","permalink":"https://www.lemonss.net/2016/12/01/hello-world/","excerpt":"从很久之前就想弄一个博客，奈何自己是一个纠结(lan)的人，再加上之前一直很忙(lan)！一直拖了这么久。 之前用过wordpress、leanote来搭建自己的博客。但是又不是很满意，wordpress是用PHP来搭的，这个作为一个坚信前端统治世界的人怎么能忍受！leanote是因为笔记同步的时候老是会出现一些莫名其妙的bug，故弃之。 无意中看到了hexo搭建的博客，从此就迷上了它，它基于markdown书写，与简书和印象笔记完美的对应起来了，所以就开始了折腾之旅。","text":"从很久之前就想弄一个博客，奈何自己是一个纠结(lan)的人，再加上之前一直很忙(lan)！一直拖了这么久。 之前用过wordpress、leanote来搭建自己的博客。但是又不是很满意，wordpress是用PHP来搭的，这个作为一个坚信前端统治世界的人怎么能忍受！leanote是因为笔记同步的时候老是会出现一些莫名其妙的bug，故弃之。 无意中看到了hexo搭建的博客，从此就迷上了它，它基于markdown书写，与简书和印象笔记完美的对应起来了，所以就开始了折腾之旅。 印象笔记对markdown的支持不是很友好，所以又去折腾了sublime的markdown语法以及印象笔记的支持，有兴趣的可以看看这篇《程序猿进阶之路——用Sublime配制Evernote全解》，这下就完美了，只差搭建hexo博客了。 折腾了一阵，纠结症又犯了，对于主题的选择又开始了，在这篇文章了中纠结了《有哪些好看的 Hexo 主题？》半天。最后还是选择yilia主题，然后又是一番折腾，添加了简书和SF的图标，又通过查看litten的相册代码，自己写了一个很垃圾的nodejs抓取脚本，有时间放在github上一起分享。 希望以后努力完善我的博客，哈哈~","categories":[{"name":"杂记","slug":"杂记","permalink":"https://www.lemonss.net/categories/%E6%9D%82%E8%AE%B0/"}],"tags":[{"name":"杂记","slug":"杂记","permalink":"https://www.lemonss.net/tags/%E6%9D%82%E8%AE%B0/"}]}],"categories":[{"name":"代码","slug":"代码","permalink":"https://www.lemonss.net/categories/%E4%BB%A3%E7%A0%81/"},{"name":"hexo","slug":"hexo","permalink":"https://www.lemonss.net/categories/hexo/"},{"name":"杂记","slug":"杂记","permalink":"https://www.lemonss.net/categories/%E6%9D%82%E8%AE%B0/"}],"tags":[{"name":"代码片段","slug":"代码片段","permalink":"https://www.lemonss.net/tags/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"},{"name":"js","slug":"js","permalink":"https://www.lemonss.net/tags/js/"},{"name":"hexo","slug":"hexo","permalink":"https://www.lemonss.net/tags/hexo/"},{"name":"css","slug":"css","permalink":"https://www.lemonss.net/tags/css/"},{"name":"移动端","slug":"移动端","permalink":"https://www.lemonss.net/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"},{"name":"杂记","slug":"杂记","permalink":"https://www.lemonss.net/tags/%E6%9D%82%E8%AE%B0/"}]}